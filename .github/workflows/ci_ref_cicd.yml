# FILE: ci_ref_cicd.yml
# DATE (created): Oct 20, 2022
# PURPOSE: 
#  This GitAction workflow defines my CI/CD pipeline for this project. 

name: CI-REF-CI-CD

on:
  push:
    #branches: [ "master" ]
    #branches-ignore: ["master"]

  pull_request:
    #branches: [ "master", "develop" ]
    #branches-ignore: ["master"]

  # SR-ADD: Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# Create custom CI/CD variables.
# Define 'workflow' level (aka "global") environment variables.
env:
  # TODO: Remember to update version on new tag
  LATEST_TAG: 1.0.0
  TIMED_DELAY: 5
  GITHUB_ENVIRONMENT_SERVER: server
  GITHUB_ENVIRONMENT_STAGING: staging
  GITHUB_ENVIRONMENT_PROD: production

  SSH_DIR_PATH: ~/.ssh/
  SSH_FILENAME_CONFIG: config

  REMOTE_GITHUB: /home/ubuntu/projects/s_git/github/
  REMOTE_DIR_TMP: tmp/
  REMOTE_DIR_STAGING: staging/
  REMOTE_DC_YAML_FILE: docker-compose.yml
  #REMOTE_DOCKER_DC_YAML_FILEPATH_TMP: /home/ubuntu/projects/s_git/github/tmp/
  #REMOTE_DOCKER_DC_YAML_FILEPATH: /home/ubuntu/projects/s_git/github/staging/docker-compose.yml

  DOCKER_DC_YAML_FILEPATH: ./docker-compose.yml
  DOCKER_CONTAINER_DJ_NAME: djdc_web_aa
  DOCKER_CONTAINER_DB_NAME: djdc_db_pgv13_aa


jobs:

  # JOB-01.
  # PURPOSE: Build & Run Docker Compose Linux containers.
  # USE-CASE: Useful as a 'smoke' test to ensure that the created containers are active & functioning as expected.
  Build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Job shell message (start).
      - name: MESSAGE (Pre).
        run: echo "Git Action Workflow - JOB 01 -  START..."

      # Dump GitHub context.
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      # Show GitHub context specific parameter values.
      - name: Show select GitHub context specific parameter values only
        run: |
          echo "[EVENT]: ${{ github.event_name }}"
          echo "[BRANCH]: ${{ github.repository.default_branch }}"

      # Runs a single command using the runners shell - 01.
      - name: Show Docker version installed on the runner.
        run: docker --version

      # Runs a single command using the runners shell - 02.
      - name: Show Docker Compose version installed on the runner.
        run: docker-compose --version

      # DOCKER: Show active containers (pre).
      - name: DOCKER - Show active containers.
        run: docker ps -a

      # Job shell message (end).
      - name: MESSAGE (Post).
        run: echo "Git Action Workflow - JOB 01 - DONE."

  # JOB-02.
  # PURPOSE: Deploy repo. to the cloud server.
  # USE-CASE: Push source code updates.  
  DeployToServer:
    # IMPORTANT: Condition true only when commiting or merging into branch 'master'.
    if: github.event.ref == 'refs/heads/master'
    needs: [Build]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Define 'job' level environment variables.
    env:
      JOB_GITHUB_ENVIRONMENT: staging
      JOB_SSH_FILENAME_KEY: ssh_private_key
      JOB_SSH_HOSTNAME: $GITHUB_ENVIRONMENT_STAGING
      JOB_SSH_PRIVATE_KEY: ${{ secrets.AWS_SERVER_LS_AAA_SSH_KEY }}
      JOB_REMOTE_HOST: ${{ secrets.AWS_SERVER_LS_AAA_HOST_DNS }}
      JOB_REMOTE_USER: ${{ secrets.AWS_SERVER_LS_AAA_USERNAME }}
      JOB_REMOTE_TARGET: $REMOTE_GITHUB$REMOTE_DIR_TMP
    name: Deploy to the '${{ secrets.AWS_SERVER_LS_AAA_USERNAME }}' environemnt.
    # [GitHub Action]: Set/Assign the workflow environment. 
    environment:
      # Name must be identical (ie. case-sensitive) to name assigned when creating GitHub environment.
      #name: $GITHUB_ENVIRONMENT_STAGING
      name: ${{ env.JOB_GITHUB_ENVIRONMENT }}
      #url: 'http://test.myapp.com'

    steps:
      - name: MESSAGE (Start)
        run: echo "Performing deployment - START..." 

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Configure SSH (GitHub workflow runnner). 
      - name: Configure SSH
        run: |
          echo "Start the ssh-agent in the background."
          ssh-agent -c
          echo "Create SSH directory."
          pwd
          mkdir -p ${{ env.SSH_DIR_PATH }}
          ls -lah ${{ env.SSH_DIR_PATH }}
          echo "Create key file."
          echo "$JOB_SSH_PRIVATE_KEY" > ${{ env.SSH_DIR_PATH }}${{ env.JOB_SSH_FILENAME_KEY }}
          chmod 600 ${{ env.SSH_DIR_PATH }}${{ env.JOB_SSH_FILENAME_KEY }}
          ls -lah ${{ env.SSH_DIR_PATH }}
          # Create SSH file 'config'
          cat >>${{ env.SSH_DIR_PATH }}${{ env.SSH_FILENAME_CONFIG }} <<END
          Host $JOB_SSH_HOSTNAME
            HostName $JOB_REMOTE_HOST
            User $JOB_REMOTE_USER
            IdentityFile ${{ env.SSH_DIR_PATH }}${{ env.JOB_SSH_FILENAME_KEY }}
            StrictHostKeyChecking no
          END
          ls -lah ${{ env.SSH_DIR_PATH }}
          cat ${{ env.SSH_DIR_PATH }}${{ env.JOB_SSH_FILENAME_KEY }}

#          echo "Start the ssh-agent in the background."
#          ssh-agent -c
#          echo "Create SSH directory."
#          mkdir -p ~/.ssh/
#          ls -lah ~/.ssh/
#          echo "Create key file."
#          echo "$JOB_SSH_PRIVATE_KEY" > ~/.ssh/key_staging
#          chmod 600 ~/.ssh/key_staging
#          ls -lah ~/.ssh/
#          cat >>~/.ssh/config <<END
#          Host staging
#            HostName $JOB_REMOTE_HOST
#            User $JOB_REMOTE_USER
#            IdentityFile ~/.ssh/key_staging
#            StrictHostKeyChecking no
#          END
#          ls -lah ~/.ssh/
#          cat ~/.ssh/key_staging

      # SSH - Show remote machine docker container info.
      - name: SSH - Verify remote server file structure
        run: |
          echo "REMOTE: List files & folders"
          ssh $JOB_SSH_HOSTNAME "sudo ls -lah"
          echo "REMOTE: Show all existing GitHub sub-directories (pre)"
          ssh $JOB_SSH_HOSTNAME "sudo ls -lah ${{ env.REMOTE_GITHUB }}"
          echo "REMOTE: Create required sub-directory (only if it doesn't already exist)."
          ssh $JOB_SSH_HOSTNAME "mkdir -p ${{ env.REMOTE_GITHUB }}${{ env.REMOTE_DIR_TMP }}"
          echo "REMOTE: Show all existing GitHub sub-directories (post)"
          ssh $JOB_SSH_HOSTNAME "sudo ls -lah ${{ env.REMOTE_GITHUB }}"

      # SSH - Show remote machine docker container info.
      - name: SSH - Show remote server Docker installation info
        run: |
          echo "REMOTE: Show Docker engine version."
          ssh $JOB_SSH_HOSTNAME "sudo docker --version"
          echo "REMOTE: Show Docker Compose version."
          ssh $JOB_SSH_HOSTNAME "sudo docker-compose --version"

      # SSH - Show remote machine docker container info.
      - name: SSH - Show all Docker container info/status (pre)
        run: |
          echo "REMOTE: Show all existing containers"
          ssh $JOB_SSH_HOSTNAME "sudo docker ps -a"

      # SSH - Deploy code with rsync over SSH.
      - name: SSH - Deploy to Server 01
        uses: easingthemes/ssh-deploy@main
        # Define 'step' level environment variables.
        env:
          # REQUIRED: 01/03
          SSH_PRIVATE_KEY: ${{ env.JOB_SSH_PRIVATE_KEY }}
          # REQUIRED: 02/03
          REMOTE_HOST: ${{ env.JOB_REMOTE_HOST }}
          # REQUIRED: 03/03
          REMOTE_USER: ${{ env.JOB_REMOTE_USER }}
          # OPTIONAL:
          TARGET: ${{ env.JOB_REMOTE_TARGET }} 

      # SSH - Build & Run the Docker container/services defined in the YAML file.
      - name: SSH - Build & Run Docker containers.
        run: |
          echo "${{ env.REMOTE_GITHUB }}${{ env.REMOTE_DIR_TMP }}"
          ssh $JOB_SSH_HOSTNAME "sudo docker-compose -f ${{ env.REMOTE_GITHUB }}${{ env.REMOTE_DIR_TMP }}${{ env.REMOTE_DC_YAML_FILE }} up -d"

      # Timed delayed for database to spin up.
      - name: Timed delay (DB spin up)
        run: |
          # Wait for database to be ready (IMPORTANT: Required for DB to spin up).
          echo "Wait for database to be ready (${{ env.TIMED_DELAY }}s)..."
          sleep $TIMED_DELAY

      # SSH - Show remote machine docker container info.
      - name: SSH - Show all Docker container info/status (post)
        run: |
          echo "REMOTE: Show all existing containers"
          ssh $JOB_SSH_HOSTNAME 'sudo docker ps -a'

      # SSH - Stop & remove the Docker container/services defined in the YAML file.
      - name: SSH - Cleanup - Stop & remove Docker containers.
        run: ssh $JOB_SSH_HOSTNAME "sudo docker-compose -f ${{ env.REMOTE_GITHUB }}${{ env.REMOTE_DIR_TMP }}${{ env.REMOTE_DC_YAML_FILE }} down"

      - name: MESSAGE (End)
        run: echo "Performing deployment - DONE." 
