# FILE: ci_simple_cicd_exp.yml
# DATE (created): Oct 17, 2022
# PURPOSE: 
#  This GitAction workflow defines my CI/CD pipeline for this project. 

name: CI-SIMPLE-CI-CD-Exp

on:
  push:
    branches: [ "test" ]
    #branches-ignore: ["master"]

  pull_request:
    branches: [ "test" ]
    #branches: [ "master", "develop" ]
    #branches-ignore: ["master"]

  # SR-ADD: Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# Create custom CI/CD variables.
# Define custom workflow environment constants (ie. secrets etc.)
env:
  # TODO: Remember to update version on new tag
  LATEST_TAG: 1.0.0
  DOCKER_DC_YAML_FILEPATH: ./docker-compose.yml
  DOCKER_CONTAINER_DJ_NAME: djdc_web_aa
  DOCKER_CONTAINER_DB_NAME: djdc_db_pgv13_aa

  REMOTE_DOCKER_DC_YAML_FILEPATH: /home/ubuntu/projects/s_git/github/staging/docker-compose.yml
  TIMED_DELAY: 5

jobs:

  # JOB-01.
  # PURPOSE: Build & Run Docker Compose Linux containers.
  # USE-CASE: Useful as a 'smoke' test to ensure that the created containers are active & functioning as expected.
  Build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Job shell message (start).
      - name: MESSAGE (Start)
        run: echo "Git Action Workflow - JOB 01 -  START..."

      # Dump GitHub context.
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      # Show GitHub context specific parameter values.
      - name: Show select GitHub context specific parameter values only
        run: |
          echo "[EVENT]: ${{ github.event_name }}"
          echo "[BRANCH]: ${{ github.repository.default_branch }}"

      # Runs a single command using the runners shell - 01.
      - name: Show Docker version installed on the runner.
        run: docker --version

      # Runs a single command using the runners shell - 02.
      - name: Show Docker Compose version installed on the runner.
        run: docker-compose --version

      # DOCKER: Show active containers (pre).
      - name: DOCKER - Show active containers.
        run: docker ps -a

      # Job shell message (end).
      - name: MESSAGE (End)
        run: echo "Git Action Workflow - JOB 01 - DONE."


  # JOB-02.
  # PURPOSE: Deploy repo. to the following environment: 'staging'
  # USE-CASE: Push source code updates.  
  DeployToStaging:
    name: Deploy to the 'staging' environemnt.
    # IMPORTANT: Condition true only when commiting or merging into branch 'master'.
    if: github.event.ref == 'refs/heads/master'
    needs: [Build]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment:
      # Name must be identical (ie. case-sensitive).
      name: staging
      #url: 'http://test.myapp.com'
    timeout-minutes: 10
    steps:
      - name: MESSAGE (Start)
        run: echo "Performing deployment - STAGING - START..." 

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY_AWS_LS_STAGING }}
          REMOTE_HOST: ${{ secrets.HOST_DNS_AWS_LS_STAGING }}
          REMOTE_USER: ${{ secrets.USERNAME_AWS_LS_STAGING }}
          TARGET: ${{ secrets.TARGET_DIR_AWS_LS_STAGING }}
        run: |
          echo "Start the ssh-agent in the background."
          ssh-agent -c
          echo "Create SSH directory."
          mkdir -p ~/.ssh/
          ls -lah ~/.ssh/
          echo "Create key file."
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/key_staging
          chmod 600 ~/.ssh/key_staging
          ls -lah ~/.ssh/
          cat >>~/.ssh/config <<END
          Host staging
            HostName $REMOTE_HOST
            User $REMOTE_USER
            IdentityFile ~/.ssh/key_staging
            StrictHostKeyChecking no
          END
          ls -lah ~/.ssh/

      - name: Execute commands on remote server.
        run: |
          ssh staging 'sudo ls -lah'
          #echo "Connect to remote host - Staging."
          #ssh $REMOTE_USER@$REMOTE_HOST
          #ssh -i $SSH_PRIVATE_KEY $REMOTE_USER@$REMOTE_HOST
          echo "Show all existing containers"
          sudo docker ps -a

          
      # Deploy code with rsync over SSH.
      - name: Deploy to Server 01 - Development
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY_AWS_LS_STAGING }}
          REMOTE_HOST: ${{ secrets.HOST_DNS_AWS_LS_STAGING }}
          REMOTE_USER: ${{ secrets.USERNAME_AWS_LS_STAGING }}
          TARGET: ${{ secrets.TARGET_DIR_AWS_LS_STAGING }}

      # Build & Run the Docker container/services defined in the YAML file.
      - name: Build & Run Docker containers.
        run: |
          echo $REMOTE_DOCKER_DC_YAML_FILEPATH
          echo '${{ env.REMOTE_DOCKER_DC_YAML_FILEPATH }}'
          echo '$REMOTE_DOCKER_DC_YAML_FILEPATH'
          echo '{$REMOTE_DOCKER_DC_YAML_FILEPATH}'
          echo '${REMOTE_DOCKER_DC_YAML_FILEPATH}'
          ssh staging 'sudo docker-compose -f ${{ env.REMOTE_DOCKER_DC_YAML_FILEPATH }} up -d'
          #ssh staging 'sudo docker-compose -f $REMOTE_DOCKER_DC_YAML_FILEPATH up -d'

      # Timed delayed for database to spin up.
      - name: Timed delay (DB spin up)
        run: |
          # Wait for database to be ready (IMPORTANT: Required for DB to spin up).
          echo "Wait for database to be ready (${{ env.TIMED_DELAY }}s)..."
          sleep $TIMED_DELAY

      # Show remote machine docker container info.
      - name: SSH - Check Docker container info/status (post)
        run: |
          echo "REMOTE: List files & folders"
          ssh staging 'sudo ls -lah'
          echo "REMOTE: Show all existing containers"
          ssh staging 'sudo docker ps -a'

      # Stop & remove the Docker container/services defined in the YAML file.
      - name: SSH - Cleanup - Stop & remove Docker containers.
        run: ssh staging 'sudo docker-compose -f ${{ env.REMOTE_DOCKER_DC_YAML_FILEPATH }} down'

      - name: MESSAGE (End)
        run: echo "Performing deployment - STAGING - DONE." 


  # TO-DO: Not working!!! (Oct 18, 2022)
  # JOB-SSH-Test01.
  # PURPOSE: Deploy repo. to the following environment: 'staging'
  # USE-CASE: Push source code updates.  
  DeployToStaging_Test01:
    name: Deploy to the 'staging' environemnt.
    # IMPORTANT: Condition true only when commiting or merging into branch 'master'.
    if: github.event.ref == 'refs/heads/master'
    needs: [Build]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment:
      # Name must be identical (ie. case-sensitive).
      name: staging
      #url: 'http://test.myapp.com'
    timeout-minutes: 10
    steps:
      - name: MESSAGE (Start)
        run: echo "Performing deployment - STAGING - START..." 

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: SSH - Check Docker container info/status (pre)
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY_AWS_LS_STAGING }}
          REMOTE_HOST: ${{ secrets.HOST_DNS_AWS_LS_STAGING }}
          REMOTE_USER: ${{ secrets.USERNAME_AWS_LS_STAGING }}
          TARGET: ${{ secrets.TARGET_DIR_AWS_LS_STAGING }}
        run: |
          echo "Start the ssh-agent in the background."
          ssh-agent -c
          echo "Create SSH directory."
          mkdir -p ~/.ssh/
          ls -lah ~/.ssh/
          echo "Create key file."
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/key_staging
          chmod 600 ~/.ssh/key_staging
          ls -lah ~/.ssh/
          cat ~/.ssh/key_staging

          # METHOD-01(TO-DO: NOT WORKING!!!): Using SSH private key.
          # COMMENTS: Looks like this method won't work because data in env variable is encrypted.   
          echo "Connect to remote host - Staging."
          #ssh -tt -i ~/.ssh/key_staging $REMOTE_USER@$REMOTE_HOST
          ssh -tti ~/.ssh/key_staging $REMOTE_USER@$REMOTE_HOST
          echo "Show all existing containers"
          sudo docker ps -a

          # METHOD-02(TO-DO: NOT WORKING!!!): By extracting SSH private key value directly from 'secrets' env variable (ie. without using explicit private key file).
          echo "Add the key."
          #ssh-add ~/.ssh/key_staging
          #ssh-add - <<< "${SSH_PRIVATE_KEY}"
          #ssh-add <(echo "$SSH_PRIVATE_KEY")
          echo "Connect to remote host - Staging."
          ssh $REMOTE_USER@$REMOTE_HOST
          echo "Show all existing containers"
          sudo docker ps -a

          
      # Deploy code with rsync over SSH.
      - name: Deploy to Server 01 - Development
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY_AWS_LS_STAGING }}
          REMOTE_HOST: ${{ secrets.HOST_DNS_AWS_LS_STAGING }}
          REMOTE_USER: ${{ secrets.USERNAME_AWS_LS_STAGING }}
          TARGET: ${{ secrets.TARGET_DIR_AWS_LS_STAGING }}


      - name: MESSAGE (End)
        run: echo "Performing deployment - STAGING - DONE." 
